Сборка:
Базовая команда для сборки:
    +----------------------------------+
    | mvn package                      |
    +----------------------------------+
    Будет собран джарник, который запускать:
    +----------------------------------+
    | java -jar <jar-name>             |
    +----------------------------------+
    Все вместе будет поднято на 127.0.0.1:8080

    При разработке рекомендую поднимать отдельно бэк отдельно фронт
    Для этого поднимать бэк из ide - например intellijIdea - через запуск файла с main методом (8080 порт)
    и запуск фронта через терминал:
    +----------------------------------+
    | npm start                        |
    +----------------------------------+
    Фронт будет запущен на 4200 порту.
    Для работы с фронтом рекомендую visual studio code

Немного о том, что и где:
    Для бэка выбран spring c модулями для безопасности, связи с бд, вебом
    все зависимости можно увидеть в pom.xml в корне проекта
- spring-boot-starter-web позволяет без webjars использовать веб наработки в проекте - для этого их достаточно поместить в
    +----------------------------------+
    | src/main/resources/public        |
    +----------------------------------+
    Именно в эту папку настроена сборка фронта.

- spring-boot-starter-data-jpa дает базовый функционал для работы с базой данных на уровне сущностей
    все классы сущностей в пакете models.
    UserPrinciple - это спец сущность для безопасности
    в подпакете projections находятся описания сущностей без каких-либо полей. Например у нас сущность story имеет поле text,
    которое является lob'ом - т.е. подразумевается, что это поле може иметь тяжелое содержимое. Выгружать его лишний раз
    смысла не имеет
    В фронэнде сущности распределены по модуля в файлах с постфиксом *.model
    Они находятся в user, operations, story папках

    Настройки базы данных находятся в файле resources/application.properties

- spring-boot-starter-security - для настройки прав доступа.
    Здесь поподробнее. Базовая безопасность достаточно примитивна, нам же нужно было иметь различные роли и проверку путей из коробки.
    Выбран был вариант jwt (JSON Web Token) - посмотри пакет security в бэке и модуль user/auth в фронте.
    мануал с пояснением как это работает на обоих уровнях:
    https://grokonez.com/spring-framework/spring-security/angular-spring-boot-jwt-authentication-example-angular-6-spring-security-mysql-full-stack-part-1-overview-and-architecture


    все зависимости фронтэнда можно увидеть в package.json в корне директории frontend
    не добавлял ничего нестандартного туда

Общий принцип работы следующий:
    Для подключения к базе данных используются классы-репозитории. В них описываются запросы, которые будем использовать -
    либо в формате jpql, либо нативные - в нашем случае postgres, либо, если запросы покрываются методами класса crudrepository
    просто используем их.
    К репозиториям обращение происходит в классах сервисах. Здесь сосредоточена бизнес-логика.
    UserDetailsServiceImpl - выделяется из массы - у него иное назначение - он для безопасности
    Общение с внешним миром происходит через классы контроллеры через rest-запросы.
    В контроллерах мы содержим описание как именно следует обращаться к к нашему приложению, чтобы получать нужные данные.

    Во фронте все несколько иначе:
    здесь файлы распределены по папкам по принадлежности к тому или иному виду сущностей.
    в shared - общеупотребимые компоненты.
    в story/user - компоненты относящиеся к различным отображениям данных сущностей
     - как сущность выглядит при просмотре
     - в списке
     - как выглядит список сущностей
     - при редактировании

    Файлы *.module содержат объявления того какие классы используются
    *.service содержат бизнес логику
    файлы без постфикса являются обычными компонентами

Принцип работы с приложением:
    Необходимо зарегистрироваться с группой доступа, которая нужна.
    Я предполагаю, что нужно будет при регистрации добавить подтверждение почты
    например для утверждения группы пользователя, а до подтверждения администратором пользователь
    имеет только права читателя
    // TODO Дима предлагает регистрации свалить на VK
    // TODO это делается посредством интеграции с Spring Social

    В шапке сайта слева есть кнопка меню выводящая панель с кнопками
    - домой
    - создать историю
    - админка
    - разлогиниться
    и также информацией о текущем юзере - его очки и роль

    на заглавной странице выводится список историй.
    // TODO пагинация и поиск по автору/названию
    // TODO предполагаю, что должен быть компонент с просмотром текстов для конкретного автора доступный при клике
    // TODO на имя автора

    в списке можно читать лишь те рассказы которые ты приобрел (кнопка "purchase")
    // TODO если предполагается использование только для отечественных ребят - руссифицировать все

По базе:
    Таблички в базе создаются автоматически - нужно только создать саму базу с именем tengu_db
    в целях отладки сейчас в applications.property установлен флаг на удаление таблиц и пересоздание таблиц
    при каждом запуске приложения.

    tengu_user и story содержат информацию о пользователях и рассказах
    rating - кто и как проголосовал и за какие рассказы
    purchase - лог всех покупок

// TODO на мобильном приложении сайт просматривать неудобно - если будет время добавить адаптивный дизайн

















